import threading
import time
import json
from typing import Dict, List

from app.services.product_service import ProductService
from app.services.category_service import CategoryService
from app.models.storage import JsonStorage  # C√≥ th·ªÉ kh√¥ng c·∫ßn n·∫øu CategoryService ƒë√£ x·ª≠ l√Ω m·ªçi th·ª©


class UpdateCategoryCronTask:
    """
    Scheduler ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√≠ch xu·∫•t v√† c·∫≠p nh·∫≠t danh s√°ch
    c√°c danh m·ª•c (categories) t·ª´ d·ªØ li·ªáu s·∫£n ph·∫©m, s·ª≠ d·ª•ng CategoryService.
    """

    def __init__(self, product_service: ProductService, category_service: CategoryService, interval_seconds: int):
        self.product_service = product_service
        self.category_service = category_service
        self.interval = interval_seconds
        self._timer = None
        self.is_running = False

    def _extract_unique_categories(self, products_data: list) -> List[Dict]:
        """
        Tr√≠ch xu·∫•t danh s√°ch c√°c danh m·ª•c duy nh·∫•t t·ª´ d·ªØ li·ªáu s·∫£n ph·∫©m.
        ƒê·∫£m b·∫£o m·ªói danh m·ª•c c√≥ ƒë·ªß th√¥ng tin (categoryId, categoryName, categoryUri).
        """
        unique_categories_map = {}  # D√πng map ƒë·ªÉ d·ªÖ d√†ng ki·ªÉm tra duy nh·∫•t theo categoryUri
        for product in products_data:
            # L∆∞u √Ω: product.get("categories", []) c√≥ th·ªÉ ch·ª©a dict ch·ªâ c√≥ name, uri,
            # ho·∫∑c c·∫£ categoryId. C·∫ßn ƒë·∫£m b·∫£o c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o Category object n·∫øu c·∫ßn.
            for category_info in product.get("categories", []):
                # S·ª≠ d·ª•ng categoryUri l√†m kh√≥a ch√≠nh t·∫°m th·ªùi ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t
                cat_uri = category_info.get("uri")
                if cat_uri:
                    # T·∫°o m·ªôt c·∫•u tr√∫c chu·∫©n cho danh m·ª•c
                    standardized_category = {
                        "categoryName": category_info.get("name"),
                        "categoryUri": cat_uri,
                        "categoryId": category_info.get("categoryId", 0)  # G√°n 0 ho·∫∑c ID m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                    }
                    # N·∫øu c√≥ ID, ∆∞u ti√™n s·ª≠ d·ª•ng ID ƒë·ªÉ tr√°nh tr√πng l·∫∑p
                    if standardized_category["categoryId"] == 0:
                        # T·∫°m th·ªùi t·∫°o m·ªôt ID d·ª±a tr√™n hash c·ªßa URI n·∫øu kh√¥ng c√≥ ID c·ª• th·ªÉ
                        # Trong th·ª±c t·∫ø, ID n√™n ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi CategoryService/storage
                        standardized_category["categoryId"] = hash(cat_uri) % (10 ** 9)  # M·ªôt c√°ch t·∫°o ID s·ªë ƒë∆°n gi·∫£n

                    # C·∫≠p nh·∫≠t ho·∫∑c th√™m v√†o map, ƒë·∫£m b·∫£o th√¥ng tin ƒë·∫ßy ƒë·ªß nh·∫•t
                    # ho·∫∑c th√¥ng tin t·ª´ s·∫£n ph·∫©m ƒë∆∞·ª£c ∆∞u ti√™n n·∫øu ƒë√≥ l√† ngu·ªìn ch√≠nh
                    if cat_uri not in unique_categories_map:
                        unique_categories_map[cat_uri] = standardized_category
                    else:
                        # H·ª£p nh·∫•t th√¥ng tin n·∫øu c√≥ th√¥ng tin b·ªï sung
                        current_cat = unique_categories_map[cat_uri]
                        if not current_cat.get("categoryName") and standardized_category.get("categoryName"):
                            current_cat["categoryName"] = standardized_category["categoryName"]
                        if not current_cat.get("categoryId") and standardized_category.get("categoryId"):
                            current_cat["categoryId"] = standardized_category["categoryId"]

        # Chuy·ªÉn map th√†nh list v√† s·∫Øp x·∫øp
        sorted_list = sorted(list(unique_categories_map.values()), key=lambda x: x.get('categoryName', ''))
        return sorted_list

    def _run_task(self):
        """H√†m ƒë∆∞·ª£c th·ª±c thi m·ªói khi scheduler ch·∫°y."""
        if self.is_running:
            self._timer = threading.Timer(self.interval, self._run_task)
            self._timer.daemon = True
            self._timer.start()

        print("üîÑ [CategoryCronTask] B·∫Øt ƒë·∫ßu t√°c v·ª• c·∫≠p nh·∫≠t danh m·ª•c...")
        try:
            all_products = self.product_service.list()

            if not all_products:
                print("‚ö†Ô∏è [CategoryCronTask] Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ƒë·ªÉ tr√≠ch xu·∫•t danh m·ª•c.")
                # N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, c√≥ th·ªÉ b·∫°n mu·ªën x√≥a h·∫øt danh m·ª•c ho·∫∑c kh√¥ng l√†m g√¨
                # Hi·ªán t·∫°i, s·∫Ω kh√¥ng c√≥ danh m·ª•c m·ªõi n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t
                return

            # B∆∞·ªõc 1: Tr√≠ch xu·∫•t c√°c danh m·ª•c m·ªõi t·ª´ s·∫£n ph·∫©m
            extracted_categories = self._extract_unique_categories(all_products)

            # B∆∞·ªõc 2: L·∫•y c√°c danh m·ª•c hi·ªán c√≥ trong CategoryService
            existing_categories = self.category_service.list_all_categories()
            existing_categories_map = {cat.get('categoryUri'): cat for cat in existing_categories}

            updated_count = 0
            created_count = 0
            deleted_count = 0

            # B∆∞·ªõc 3: ƒê·ªìng b·ªô h√≥a danh m·ª•c (th√™m / c·∫≠p nh·∫≠t)
            for extracted_cat_data in extracted_categories:
                cat_uri = extracted_cat_data.get('categoryUri')

                if cat_uri in existing_categories_map:
                    # Danh m·ª•c ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra xem c√≥ c·∫ßn c·∫≠p nh·∫≠t kh√¥ng
                    existing_cat_data = existing_categories_map[cat_uri]

                    # So s√°nh c√°c tr∆∞·ªùng quan tr·ªçng (t√™n, ID)
                    if (existing_cat_data.get('categoryName') != extracted_cat_data.get('categoryName') or
                            existing_cat_data.get('categoryId') != extracted_cat_data.get('categoryId')):
                        # C·∫≠p nh·∫≠t danh m·ª•c
                        # L∆∞u √Ω: c·∫ßn id th·∫≠t c·ªßa danh m·ª•c ƒë·ªÉ update
                        # Gi·∫£ ƒë·ªãnh CategoryService.update_category nh·∫≠n ID c·ªßa Category object
                        self.category_service.update_category(
                            existing_cat_data['id'],  # D√πng ID c·ªßa Category object
                            {
                                "categoryName": extracted_cat_data.get("categoryName"),
                                "categoryUri": extracted_cat_data.get("categoryUri"),
                                "categoryId": extracted_cat_data.get("categoryId")
                            }
                        )
                        updated_count += 1
                    # X√≥a kh·ªèi map ƒë·ªÉ theo d√µi nh·ªØng danh m·ª•c c·∫ßn x√≥a
                    del existing_categories_map[cat_uri]
                else:
                    # Danh m·ª•c ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
                    # S·ª≠ d·ª•ng CategoryService.create_category()
                    # C·∫ßn ƒë·∫£m b·∫£o categoryId l√† duy nh·∫•t n·∫øu kh√¥ng d√πng uuid
                    new_category_payload = {
                        "categoryId": extracted_cat_data.get("categoryId"),  # S·ª≠ d·ª•ng ID t·ª´ d·ªØ li·ªáu tr√≠ch xu·∫•t
                        "categoryName": extracted_cat_data.get("categoryName"),
                        "categoryUri": extracted_cat_data.get("categoryUri"),
                    }
                    self.category_service.create_category(new_category_payload)
                    created_count += 1

            # B∆∞·ªõc 4: X√≥a c√°c danh m·ª•c kh√¥ng c√≤n t·ªìn t·∫°i trong d·ªØ li·ªáu s·∫£n ph·∫©m
            for uri_to_delete, cat_data_to_delete in existing_categories_map.items():
                self.category_service.delete_category(cat_data_to_delete['id'])  # D√πng ID c·ªßa Category object
                deleted_count += 1

            print(
                f"‚úÖ [CategoryCronTask] C·∫≠p nh·∫≠t ho√†n t·∫•t: T·∫°o {created_count}, C·∫≠p nh·∫≠t {updated_count}, X√≥a {deleted_count} danh m·ª•c.")

        except Exception as e:
            print(f"‚ùå [CategoryCronTask] L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t danh m·ª•c: {e}")
            import traceback
            traceback.print_exc()  # In stack trace ƒë·ªÉ debug

    def start(self):
        """B·∫Øt ƒë·∫ßu ch·∫°y scheduler l·∫ßn ƒë·∫ßu."""
        if not self.is_running:
            self.is_running = True
            # L·∫ßn ch·∫°y ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c g·ªçi sau interval
            # N·∫øu mu·ªën ch·∫°y ngay l·∫≠p t·ª©c, b·∫°n c√≥ th·ªÉ g·ªçi _run_task() ·ªü ƒë√¢y tr∆∞·ªõc khi set timer
            self._timer = threading.Timer(self.interval, self._run_task)
            self._timer.daemon = True
            self._timer.start()
            print("[CategoryCronTask] ƒê√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v√† s·∫Ω ch·∫°y l·∫ßn ƒë·∫ßu sau", self.interval, "gi√¢y.")

    def stop(self):
        """D·ª´ng scheduler."""
        self.is_running = False
        if self._timer:
            self._timer.cancel()  # H·ªßy timer hi·ªán t·∫°i
        print("‚èπÔ∏è [CategoryCronTask] ƒê√£ d·ª´ng.")

