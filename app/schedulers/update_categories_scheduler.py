import threading
import time
import json

from app.services.product_service import ProductService
from app.models.storage import JsonStorage


class UpdateCategoryCronTask: # Tr∆∞·ªõc ƒë√¢y g·ªçi l√† UpdateCategoryCronTask
    """
    Scheduler ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√≠ch xu·∫•t v√† c·∫≠p nh·∫≠t danh s√°ch
    c√°c danh m·ª•c (categories) t·ª´ d·ªØ li·ªáu s·∫£n ph·∫©m.
    """

    def __init__(self, product_service: ProductService, categories_storage: JsonStorage, interval_seconds: int):
        self.product_service = product_service
        self.categories_storage = categories_storage
        self.interval = interval_seconds
        self._timer = None
        self.is_running = False

    def _extract_unique_categories(self, products_data: list) -> list:
        """
        Tr√≠ch xu·∫•t danh s√°ch c√°c danh m·ª•c duy nh·∫•t t·ª´ d·ªØ li·ªáu s·∫£n ph·∫©m.
        """
        unique_categories = {}
        for product in products_data:
            for category in product.get("categories", []):
                cat_id = category.get("categoryId")
                if cat_id is not None:
                    unique_categories[cat_id] = {
                        "categoryId": cat_id,
                        "categoryName": category.get("name"),
                        "categoryUri": category.get("uri")
                    }

        sorted_list = sorted(list(unique_categories.values()), key=lambda x: x['categoryName'])
        return sorted_list

    def _run_task(self):
        """H√†m ƒë∆∞·ª£c th·ª±c thi m·ªói khi scheduler ch·∫°y."""
        if self.is_running:
            self._timer = threading.Timer(self.interval, self._run_task)
            self._timer.daemon = True
            self._timer.start()

        print("üîÑ [CategoryScheduler] B·∫Øt ƒë·∫ßu t√°c v·ª• c·∫≠p nh·∫≠t danh m·ª•c...")
        try:
            all_products = self.product_service.list()

            if not all_products:
                print("‚ö†Ô∏è [CategoryScheduler] Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ƒë·ªÉ c·∫≠p nh·∫≠t danh m·ª•c.")
                return

            unique_categories = self._extract_unique_categories(all_products)
            self.categories_storage.save_all(unique_categories)

            print(f"‚úÖ [CategoryScheduler] C·∫≠p nh·∫≠t th√†nh c√¥ng {len(unique_categories)} danh m·ª•c.")

        except Exception as e:
            print(f"‚ùå [CategoryScheduler] L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t danh m·ª•c: {e}")

    def start(self):
        """B·∫Øt ƒë·∫ßu ch·∫°y scheduler l·∫ßn ƒë·∫ßu."""
        if not self.is_running:
            self.is_running = True
            self._timer = threading.Timer(self.interval, self._run_task)
            self._timer.daemon = True
            self._timer.start()
            print("[CategoryScheduler] ƒê√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v√† s·∫Ω ch·∫°y l·∫ßn ƒë·∫ßu sau", self.interval, "gi√¢y.")

    def stop(self):
        """D·ª´ng scheduler."""
        self.is_running = False
        if self._timer:
            self._timer.cancel() # H·ªßy timer hi·ªán t·∫°i
        print("‚èπÔ∏è [CategoryScheduler] ƒê√£ d·ª´ng.")
