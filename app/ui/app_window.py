import tkinter as tk
from tkinter import ttk

class AppWindow(tk.Toplevel):
    def __init__(self, session_user: dict, **kwargs):
        super().__init__(**kwargs)
        self.session_user = session_user

        # G·ªçi ph∆∞∆°ng th·ª©c c·∫•u h√¨nh UI
        self._setup_ui_config()

        self.title(f"Dashboard - Xin ch√†o, {session_user.get('username', 'user')}")
        self.geometry(self.config['window_geometry'])
        self.minsize(self.config['min_window_size'][0], self.config['min_window_size'][1])

        self.protocol("WM_DELETE_WINDOW", self.handle_close)

        self.view_cache = {}
        self.current_view = None

        main_pane = tk.PanedWindow(self, orient=tk.HORIZONTAL, sashrelief=tk.RAISED)
        main_pane.pack(fill=tk.BOTH, expand=True)

        self.nav_frame = ttk.Frame(main_pane, width=self.config['nav_frame_width'])
        main_pane.add(self.nav_frame, stretch="never")

        self.content_frame = ttk.Frame(main_pane)
        main_pane.add(self.content_frame, stretch="always")

    def _setup_ui_config(self):
        """
        Gom c·∫•u h√¨nh UI c·ªßa ·ª©ng d·ª•ng t·∫°i ƒë√¢y.
        S·ª≠ d·ª•ng self.config ƒë·ªÉ l∆∞u tr·ªØ c√°c gi√° tr·ªã c·∫•u h√¨nh.
        """
        self.config = {
            # C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh
            "window_geometry": "1664x1040",  # K√≠ch th∆∞·ªõc ban ƒë·∫ßu c·ªßa c·ª≠a s·ªï (chi·ªÅu r·ªông x chi·ªÅu cao)
            "min_window_size": (1331, 832), # K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu c·ªßa c·ª≠a s·ªï (chi·ªÅu r·ªông, chi·ªÅu cao)
            "window_title_prefix": "Dashboard - Xin ch√†o, ", # Ti·ªÅn t·ªë ti√™u ƒë·ªÅ c·ª≠a s·ªï

            # C·∫•u h√¨nh thanh ƒëi·ªÅu h∆∞·ªõng (navigation bar)
            "nav_frame_width": 260,         # Chi·ªÅu r·ªông c·ªë ƒë·ªãnh c·ªßa khung ƒëi·ªÅu h∆∞·ªõng
            "nav_button_padx": 13,          # Kho·∫£ng ƒë·ªám ngang cho c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
            "nav_button_pady": 7,           # Kho·∫£ng ƒë·ªám d·ªçc cho c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng

            # C·∫•u h√¨nh khung n·ªôi dung (content frame)
            "content_padding": 13           # Kho·∫£ng ƒë·ªám xung quanh n·ªôi dung hi·ªÉn th·ªã trong content_frame
        }

    def add_nav_button(self, text, command):
        """Th√™m m·ªôt n√∫t v√†o thanh ƒëi·ªÅu h∆∞·ªõng."""
        btn = ttk.Button(self.nav_frame, text=text, command=command)
        btn.pack(fill=tk.X, padx=self.config['nav_button_padx'], pady=self.config['nav_button_pady'])

    def show_view(self, view_class, *args, **kwargs):
        """Hi·ªÉn th·ªã m·ªôt view v·ªõi c∆° ch·∫ø caching."""
        if self.current_view:
            self.current_view.pack_forget()

        if view_class in self.view_cache:
            print(f"üîÑ L·∫•y view t·ª´ cache: {view_class.__name__}")
            self.current_view = self.view_cache[view_class]
        else:
            print(f"‚ú® T·∫°o m·ªõi view: {view_class.__name__}")
            new_view = view_class(self.content_frame, *args, **kwargs)
            self.view_cache[view_class] = new_view
            self.current_view = new_view

        self.current_view.pack(expand=True, fill=tk.BOTH,
                               padx=self.config['content_padding'],
                               pady=self.config['content_padding'])

        if hasattr(self.current_view, 'refresh') and callable(getattr(self.current_view, 'refresh')):
            print(f"‚ö° G·ªçi refresh() cho view {view_class.__name__}")
            self.current_view.refresh()

    def handle_close(self):
        """X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï v√† tho√°t ·ª©ng d·ª•ng."""
        self.destroy()
        if self.master:
            self.master.destroy()
