# Th√™m v√†o file views.py ho·∫∑c file m·ªõi v√≠ d·ª•: app/ui/cart_view.py

import tkinter as tk
from tkinter import ttk, messagebox
from functools import partial


# Gi·∫£ ƒë·ªãnh ScrollableFrame ƒë√£ c√≥ trong file n√†y ho·∫∑c ƒë∆∞·ª£c import
# (Code cho ScrollableFrame ƒë∆∞·ª£c ƒë√≠nh k√®m ·ªü cu·ªëi n·∫øu c·∫ßn)

class CartView(ttk.Frame):
    """Giao di·ªán qu·∫£n l√Ω gi·ªè h√†ng v√† t·∫°o ƒë∆°n h√†ng."""

    def __init__(self, master, cart_service, order_service, customer_service, current_user):
        super().__init__(master)
        self.cart_service = cart_service
        self.order_service = order_service
        self.customer_service = customer_service
        self.current_user = current_user

        self.customer_entries = {}

        self._create_widgets()
        self.refresh()

    def _create_widgets(self):
        """T·∫°o layout ch√≠nh v·ªõi 2 khung tr√°i-ph·∫£i."""
        # PanedWindow cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc 2 khung
        main_pane = tk.PanedWindow(self, orient=tk.HORIZONTAL, sashrelief=tk.RAISED)
        main_pane.pack(fill=tk.BOTH, expand=True)

        # --- Khung b√™n tr√°i: Chi ti·∫øt gi·ªè h√†ng ---
        left_frame = ttk.Frame(main_pane, width=600)
        self._create_cart_details_frame(left_frame)
        main_pane.add(left_frame, stretch="always")

        # --- Khung b√™n ph·∫£i: Th√¥ng tin kh√°ch h√†ng ---
        right_frame = ttk.Frame(main_pane, width=300)
        self._create_customer_info_frame(right_frame)
        main_pane.add(right_frame, stretch="never")

    def _create_cart_details_frame(self, parent):
        """T·∫°o khung hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m trong gi·ªè."""
        container = ttk.LabelFrame(parent, text="Chi ti·∫øt gi·ªè h√†ng", padding=10)
        container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # Frame ch·ª©a danh s√°ch s·∫£n ph·∫©m c√≥ th·ªÉ cu·ªôn
        self.scroll_frame = ScrollableFrame(container)
        self.scroll_frame.pack(fill=tk.BOTH, expand=True)

        # Frame t·ªïng k·∫øt ·ªü d∆∞·ªõi
        summary_frame = ttk.LabelFrame(parent, text="T·ªïng quan", padding=10)
        summary_frame.pack(fill=tk.X, padx=5, pady=5)

        self.lbl_total_items = ttk.Label(summary_frame, text="T·ªïng s·ªë s·∫£n ph·∫©m: 0", font=("Arial", 10, "bold"))
        self.lbl_total_items.pack(anchor='w')

        self.lbl_total_price = ttk.Label(summary_frame, text="T·ªïng ti·ªÅn: 0 ‚Ç´", font=("Arial", 12, "bold"),
                                         foreground="red")
        self.lbl_total_price.pack(anchor='w', pady=(5, 0))

    def _create_customer_info_frame(self, parent):
        """T·∫°o khung nh·∫≠p th√¥ng tin kh√°ch h√†ng v√† n√∫t t·∫°o ƒë∆°n h√†ng."""
        container = ttk.LabelFrame(parent, text="Th√¥ng tin giao h√†ng", padding=15)
        container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        fields = {
            "name": "H·ªç v√† T√™n",
            "phone": "S·ªë ƒëi·ªán tho·∫°i",
            "email": "Email",
            "address": "ƒê·ªãa ch·ªâ giao h√†ng"
        }

        for key, label_text in fields.items():
            row_frame = ttk.Frame(container)
            row_frame.pack(fill=tk.X, pady=4)
            ttk.Label(row_frame, text=label_text + ":").pack(anchor='w')

            if key == "address":
                entry = tk.Text(row_frame, height=4, font=("Arial", 10))
            else:
                entry = ttk.Entry(row_frame, font=("Arial", 10))

            entry.pack(fill=tk.X)
            self.customer_entries[key] = entry

        # N√∫t t·∫°o ƒë∆°n h√†ng
        create_order_btn = ttk.Button(container, text="‚úÖ T·∫°o ƒê∆°n H√†ng", command=self._create_order,
                                      style="Accent.TButton")
        create_order_btn.pack(fill=tk.X, pady=(20, 5), ipady=10)

    def refresh(self):
        """T·∫£i l·∫°i d·ªØ li·ªáu gi·ªè h√†ng v√† c·∫≠p nh·∫≠t giao di·ªán."""
        self._clear_cart_items()

        cart = self.cart_service.get_cart()

        if not cart.items:
            self._show_empty_message()
        else:
            for i, item in enumerate(cart.items):
                self._create_cart_item_widget(item, i)

        # C·∫≠p nh·∫≠t th√¥ng tin t·ªïng k·∫øt
        total_items = cart.get_item_count()
        total_price = cart.get_total()

        self.lbl_total_items.config(text=f"T·ªïng s·ªë s·∫£n ph·∫©m: {total_items}")
        self.lbl_total_price.config(text=f"T·ªïng ti·ªÅn: {total_price:,.0f} ‚Ç´")

    def _clear_cart_items(self):
        """X√≥a c√°c widget s·∫£n ph·∫©m c≈© kh·ªèi view."""
        for widget in self.scroll_frame.scrollable_frame.winfo_children():
            widget.destroy()

    def _show_empty_message(self):
        """Hi·ªÉn th·ªã th√¥ng b√°o khi gi·ªè h√†ng tr·ªëng."""
        ttk.Label(
            self.scroll_frame.scrollable_frame,
            text="üõí\nGi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.",
            font=("Arial", 14),
            justify="center",
            foreground="#6c757d"
        ).pack(pady=50, expand=True)

    def _create_cart_item_widget(self, item, index):
        """T·∫°o widget cho m·ªôt s·∫£n ph·∫©m trong gi·ªè."""
        item_frame = ttk.Frame(self.scroll_frame.scrollable_frame, padding=10, relief="solid", borderwidth=1)
        item_frame.pack(fill=tk.X, pady=5, padx=5)

        # C·∫•u h√¨nh grid
        item_frame.columnconfigure(0, weight=4)  # T√™n s·∫£n ph·∫©m
        item_frame.columnconfigure(1, weight=2)  # Gi√°
        item_frame.columnconfigure(2, weight=2)  # S·ªë l∆∞·ª£ng
        item_frame.columnconfigure(3, weight=2)  # Th√†nh ti·ªÅn
        item_frame.columnconfigure(4, weight=1)  # N√∫t x√≥a

        # T√™n s·∫£n ph·∫©m
        ttk.Label(item_frame, text=item.name, wraplength=300).grid(row=0, column=0, sticky="w", rowspan=2)

        # Gi√°
        ttk.Label(item_frame, text="Gi√°:").grid(row=0, column=1, sticky="w")
        ttk.Label(item_frame, text=f"{item.price:,.0f} ‚Ç´").grid(row=1, column=1, sticky="w")

        # S·ªë l∆∞·ª£ng (d√πng Spinbox ƒë·ªÉ d·ªÖ d√†ng thay ƒë·ªïi)
        ttk.Label(item_frame, text="S·ªë l∆∞·ª£ng:").grid(row=0, column=2, sticky="w")
        qty_var = tk.StringVar(value=str(item.quantity))
        qty_spinbox = ttk.Spinbox(
            item_frame, from_=1, to=99, width=5, textvariable=qty_var,
            command=lambda: self._update_quantity(item.item_id, qty_spinbox.get())
        )
        qty_spinbox.grid(row=1, column=2, sticky="w")

        # Th√†nh ti·ªÅn
        ttk.Label(item_frame, text="Th√†nh ti·ªÅn:").grid(row=0, column=3, sticky="w")
        subtotal = item.get_subtotal()
        ttk.Label(item_frame, text=f"{subtotal:,.0f} ‚Ç´", font=("Arial", 10, "bold")).grid(row=1, column=3, sticky="w")

        # N√∫t x√≥a
        remove_btn = ttk.Button(item_frame, text="üóëÔ∏è X√≥a", command=lambda: self._remove_item(item.item_id))
        remove_btn.grid(row=0, column=4, rowspan=2, sticky="e")

    def _update_quantity(self, item_id, new_quantity_str):
        """C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√† t·∫£i l·∫°i view."""
        try:
            new_quantity = int(new_quantity_str)
            if new_quantity > 0:
                self.cart_service.update_item_quantity(item_id, new_quantity)
                self.refresh()
        except (ValueError, TypeError):
            messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá.", parent=self)

    def _remove_item(self, item_id):
        """X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng."""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?"):
            self.cart_service.remove_item(item_id)
            self.refresh()

    def _create_order(self):
        """Thu th·∫≠p th√¥ng tin v√† g·ªçi service ƒë·ªÉ t·∫°o ƒë∆°n h√†ng."""
        # 1. Thu th·∫≠p th√¥ng tin kh√°ch h√†ng t·ª´ form
        customer_info = {key: entry.get("1.0", "end-1c") if isinstance(entry, tk.Text) else entry.get()
                         for key, entry in self.customer_entries.items()}

        # 2. Validation c∆° b·∫£n
        if not customer_info['name'] or not customer_info['phone']:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p H·ªç t√™n v√† S·ªë ƒëi·ªán tho·∫°i.", parent=self)
            return

        # 3. L·∫•y th√¥ng tin gi·ªè h√†ng
        cart = self.cart_service.get_cart()
        if not cart.items:
            messagebox.showwarning("Gi·ªè h√†ng tr·ªëng", "Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng.",
                                   parent=self)
            return

        customer_id = self.customer_service.find_or_create_customer(customer_info)

        # 4. T·∫°o payload cho ƒë∆°n h√†ng (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh c·∫•u tr√∫c n√†y cho ph√π h·ª£p v·ªõi OrderService)
        order_payload = {
            "customer_id": customer_id,  # Th√™m tr∆∞·ªùng n√†y
            "customer_info": customer_info,
            "items": [item.__dict__ for item in cart.items],
            "total_amount": cart.get_total(),
            "user_id": self.current_user.get("id")
        }
        # 5. G·ªçi OrderService ƒë·ªÉ t·∫°o ƒë∆°n h√†ng
        try:
            # Gi·∫£ ƒë·ªãnh OrderService c√≥ ph∆∞∆°ng th·ª©c create_order(payload)
            new_order = self.order_service.create_order(order_payload)
            # L·∫•y customer_id thay v√¨ ch·ªâ truy·ªÅn th√¥ng tin th√¥
            customer_id = self.customer_service.find_or_create_customer(customer_info)
            # T·∫°o payload cho ƒë∆°n h√†ng v·ªõi customer_id

            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫°o th√†nh c√¥ng ƒë∆°n h√†ng #{new_order.get('id')}", parent=self)

            # 6. X√≥a gi·ªè h√†ng sau khi t·∫°o ƒë∆°n th√†nh c√¥ng
            self.cart_service.clear_cart()

            # X√≥a th√¥ng tin kh√°ch ƒë√£ nh·∫≠p
            for entry in self.customer_entries.values():
                entry.delete("1.0", "end") if isinstance(entry, tk.Text) else entry.delete(0, "end")

            # 7. T·∫£i l·∫°i view
            self.refresh()

        except Exception as e:
            messagebox.showerror("L·ªói t·∫°o ƒë∆°n h√†ng", f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}", parent=self)
            import traceback
            traceback.print_exc()


# --- D√°n l·ªõp ScrollableFrame ·ªü ƒë√¢y n·∫øu n√≥ ch∆∞a c√≥ trong file views.py ---
class ScrollableFrame(ttk.Frame):
    def __init__(self, container, *args, **kwargs):
        super().__init__(container, *args, **kwargs)
        self.canvas = tk.Canvas(self, highlightthickness=0)
        self.scrollbar = ttk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = ttk.Frame(self.canvas)
        self.scrollable_frame.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        self.bind_mousewheel()

    def bind_mousewheel(self):
        def _on_mousewheel(event): self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        def _bind_to_mousewheel(event): self.canvas.bind_all("<MouseWheel>", _on_mousewheel)

        def _unbind_from_mousewheel(event): self.canvas.unbind_all("<MouseWheel>")

        self.bind('<Enter>', _bind_to_mousewheel)
        self.bind('<Leave>', _unbind_from_mousewheel)
