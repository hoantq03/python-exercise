import tkinter as tk
from tkinter import ttk, messagebox
import re

class LoginView(tk.Toplevel):
    UI_CFG = {
        # --- C·∫•u h√¨nh chung cho Font v√† M√†u s·∫Øc ---
        "title_font": ("Arial", 23, "bold"),  # Font cho ti√™u ƒë·ªÅ ch√≠nh (v√≠ d·ª•: "ƒêƒÉng nh·∫≠p")
        "title_color": "#D60000",  # M√†u s·∫Øc cho ti√™u ƒë·ªÅ ch√≠nh (m√£ Hex)

        "label_font": ("Arial", 13),  # Font cho c√°c nh√£n (v√≠ d·ª•: "T√™n ƒëƒÉng nh·∫≠p:", "M·∫≠t kh·∫©u:")
        "entry_font": ("Arial", 16),  # Font cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu (Entry)

        "button_font": ("Arial", 16, "bold"),  # Font cho c√°c n√∫t (c√≥ th·ªÉ √°p d·ª•ng ri√™ng cho t·ª´ng lo·∫°i n√∫t n·∫øu c·∫ßn)

        # --- C·∫•u h√¨nh Padding v√† Kho·∫£ng c√°ch ---
        "padx_common": 29,  # Padding ngang chung (padx) cho nhi·ªÅu th√†nh ph·∫ßn
        # (v√≠ d·ª•: nh√£n, tr∆∞·ªùng nh·∫≠p li·ªáu, n√∫t)

        "pady_title": (23, 10),  # Padding d·ªçc (pady) cho ti√™u ƒë·ªÅ ch√≠nh.
        # (top_padding, bottom_padding)

        "pady_entry": (0, 16),  # Padding d·ªçc cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu (Entry).
        # (top_padding, bottom_padding)

        "pady_button": (5, 5),  # Padding d·ªçc cho n√∫t ƒëƒÉng nh·∫≠p.
        # (top_padding, bottom_padding)

        # --- C·∫•u h√¨nh cho ph·∫ßn Separator (ƒë∆∞·ªùng ph√¢n c√°ch) ---
        "separator_label_font": ("Arial", 13, "italic"),  # Font cho nh√£n trong ph·∫ßn ph√¢n c√°ch ("Ho·∫∑c ƒëƒÉng nh·∫≠p b·∫±ng")

        "separator_padx": (29, 10),  # Padding ngang cho c√°c ƒë∆∞·ªùng ph√¢n c√°ch (Separator).
        # (left_padding, right_padding) cho ph·∫ßn b√™n tr√°i c·ªßa nh√£n
        # v√† ng∆∞·ª£c l·∫°i cho ph·∫ßn b√™n ph·∫£i.

        "separator_pady": 16,  # Padding d·ªçc cho khung ch·ª©a c√°c ƒë∆∞·ªùng ph√¢n c√°ch v√† nh√£n.

        # --- C·∫•u h√¨nh cho c√°c n√∫t c·ª• th·ªÉ ---
        "show_pw_button_width": 3,  # Chi·ªÅu r·ªông (width) c·ªßa n√∫t "hi·ªán/·∫©n m·∫≠t kh·∫©u" (üëÅ).

        "social_button_width": 16,  # Chi·ªÅu r·ªông (width) c·ªßa c√°c n√∫t ƒëƒÉng nh·∫≠p m·∫°ng x√£ h·ªôi (Google, Zalo).

        "social_button_padx": (29, 16),  # Padding ngang cho c√°c n√∫t ƒëƒÉng nh·∫≠p m·∫°ng x√£ h·ªôi.
        # (left_padding, right_padding) cho n√∫t Google,
        # v√† (right_padding, left_padding) cho n√∫t Zalo ƒë·ªÉ t·∫°o kho·∫£ng c√°ch ƒë·ªëi x·ª©ng.
    }

    def __init__(self, master, auth_service, on_success):
        super().__init__(master)
        self.title("ƒêƒÉng nh·∫≠p")
        self.geometry("380x420")
        self.resizable(False, False)
        self.auth = auth_service
        self.on_success = on_success

        # --- Title
        ttk.Label(self, text="ƒêƒÉng nh·∫≠p",
                  font=self.UI_CFG["title_font"],
                  foreground=self.UI_CFG["title_color"]).pack(pady=self.UI_CFG["pady_title"])

        # --- Phone input
        ttk.Label(self, text="T√™n ƒëƒÉng nh·∫≠p:",
                  font=self.UI_CFG["label_font"]).pack(anchor="w", padx=self.UI_CFG["padx_common"])
        self.e_user = ttk.Entry(self,
                                font=self.UI_CFG["entry_font"])
        self.e_user.pack(fill="x", padx=self.UI_CFG["padx_common"], pady=self.UI_CFG["pady_entry"])

        # --- Password input + show/hide
        ttk.Label(self, text="M·∫≠t kh·∫©u:",
                  font=self.UI_CFG["label_font"]).pack(anchor="w", padx=self.UI_CFG["padx_common"])
        pw_frame = ttk.Frame(self)
        pw_frame.pack(fill="x", padx=self.UI_CFG["padx_common"], pady=self.UI_CFG["pady_entry"])
        self.e_pass = ttk.Entry(pw_frame,
                                font=self.UI_CFG["entry_font"],
                                show="*")
        self.e_pass.pack(side=tk.LEFT, fill="x", expand=1)
        self.showing_pw = False
        show_btn = ttk.Button(pw_frame, text="üëÅ",
                              width=self.UI_CFG["show_pw_button_width"],
                              command=self.toggle_pw)
        show_btn.pack(side=tk.LEFT, padx=4)

        # --- ƒêƒÉng nh·∫≠p button
        login_btn = ttk.Button(self, text="ƒêƒÉng nh·∫≠p",
                               # font=self.UI_CFG["button_font"], # C√≥ th·ªÉ th√™m n·∫øu mu·ªën font ri√™ng
                               command=self._do_login)
        login_btn.pack(fill="x", padx=self.UI_CFG["padx_common"], pady=self.UI_CFG["pady_button"])

        # --- Separator
        sep_frame = ttk.Frame(self)
        sep_frame.pack(fill="x", pady=self.UI_CFG["separator_pady"])
        sep_left = ttk.Separator(sep_frame, orient="horizontal")
        sep_left.pack(side=tk.LEFT, fill="x", expand=1, padx=self.UI_CFG["separator_padx"])
        ttk.Label(sep_frame, text="Ho·∫∑c ƒëƒÉng nh·∫≠p b·∫±ng",
                  font=self.UI_CFG["separator_label_font"]).pack(side=tk.LEFT)
        sep_right = ttk.Separator(sep_frame, orient="horizontal")
        sep_right.pack(side=tk.LEFT, fill="x", expand=1, padx=self.UI_CFG["separator_padx"])

        # --- Social login buttons (dummy)
        social_frame = ttk.Frame(self)
        social_frame.pack(pady=(0,6)) # Gi·ªØ nguy√™n pady n√†y n·∫øu n√≥ l√† c·ª• th·ªÉ cho social frame
        ttk.Button(social_frame, text="Google",
                   width=self.UI_CFG["social_button_width"],
                   state=tk.DISABLED).pack(side=tk.LEFT, padx=self.UI_CFG["social_button_padx"])
        ttk.Button(social_frame, text="Zalo",
                   width=self.UI_CFG["social_button_width"],
                   state=tk.DISABLED).pack(side=tk.LEFT, padx=(self.UI_CFG["social_button_padx"][1], self.UI_CFG["social_button_padx"][0]))


    def toggle_pw(self):
        self.showing_pw = not self.showing_pw
        self.e_pass.config(show="" if self.showing_pw else "*")

    def _do_login(self):
        user = self.e_user.get().strip()
        pw = self.e_pass.get().strip()
        if not user or not pw:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
            return

        u = self.auth.login(user, pw)
        if u:
            messagebox.showinfo("Th√†nh c√¥ng", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
            self.on_success(u)
            self.destroy()
        else:
            messagebox.showerror("L·ªói", "Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u.")

