# -*- coding: utf-8 -*-
# Ho·∫∑c
# !/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import tkinter as tk
import os
from dotenv import load_dotenv

# Models
from app.models.storage import JsonStorage
from app.schedulers.update_categories_scheduler import UpdateCategoryCronTask

# Services
from app.services.auth import AuthService
from app.services.cart_service import CartService
from app.services.category_service import CategoryService
from app.services.customer_service import CustomerService
from app.services.product_service import ProductService
from app.services.order_service import OrderService
from app.services.user_service import UserService

# UI Views
from app.ui.app_window import AppWindow
from app.ui.cart_view import CartView
from app.ui.login_view import LoginView
from app.ui.profile_view import ProfileView
from app.ui.report_view import ReportFrame
from app.ui.users_view import UsersView
from app.ui.customers_view import CustomersView
from app.ui.products_view import ProductsView
from app.ui.orders_view import OrdersView

# H·ªá th·ªëng c√†o d·ªØ li·ªáu (Scraper)
from app.scrapers.phone_detail_scraper import PhoneDetailScraper
from app.scrapers.phone_list_scraper import PhoneListScraper
from app.scrapers.laptop_list_scraper import LaptopListScraper

# Schedulers
from app.schedulers.scraper_scheduler import ScraperScheduler
from app.utils.dummy_orders_generation import DummyOrderCreator


def get_bool_from_env(key: str, default: bool = False) -> bool:
    value = os.getenv(key, str(default)).lower()
    return value in ('true', '1', 't', 'on')


# C√°c vai tr√≤ (roles) trong h·ªá th·ªëng c·ªßa b·∫°n
ROLES_ENUM = {
    'ADMIN': 'administrator',
    'EMP_MANAGER': 'employee_manager',
    'SALES_MANAGER': 'sales_manager',
    'SALES_PERSON': 'sales_person',
    'ACCOUNTANT': 'accountant',
}


def resource_path(relative_path):
    """
    L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn t√†i nguy√™n.
    Ho·∫°t ƒë·ªông cho c·∫£ m√¥i tr∆∞·ªùng dev (ch·∫°y t·ª´ terminal) v√† khi ƒë√£ ƒë√≥ng g√≥i b·∫±ng PyInstaller.
    """
    # Ki·ªÉm tra xem ·ª©ng d·ª•ng c√≥ ƒëang ch·∫°y d∆∞·ªõi d·∫°ng file ƒë√£ ƒë√≥ng g√≥i (frozen) kh√¥ng
    if getattr(sys, 'frozen', False):
        # N·∫æU ƒê√É ƒê√ìNG G√ìI (CH·∫†Y B·∫∞NG FILE .EXE)
        # base_path l√† th∆∞ m·ª•c t·∫°m _MEIPASS do PyInstaller t·∫°o ra.
        base_path = sys._MEIPASS
        # D·ªØ li·ªáu n·∫±m tr·ª±c ti·∫øp trong th∆∞ m·ª•c n√†y (v√≠ d·ª•: _MEIPASS/data/users.json)
        # n√™n ch√∫ng ta ch·ªâ c·∫ßn n·ªëi base_path v·ªõi ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi.
        return os.path.join(base_path, relative_path)
    else:
        # N·∫æU CH·∫†Y T·ª™ M√É NGU·ªíN (CH·∫†Y B·∫∞NG TERMINAL)
        # base_path l√† th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n (n∆°i ch·ª©a main.py).
        base_path = os.path.abspath(".")
        # Trong m√£ ngu·ªìn, th∆∞ m·ª•c d·ªØ li·ªáu n·∫±m b√™n trong 'app'.
        # V√¨ v·∫≠y, ch√∫ng ta ph·∫£i n·ªëi base_path v·ªõi 'app' r·ªìi m·ªõi ƒë·∫øn ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi.
        return os.path.join(base_path, 'app', relative_path)


def run():
    # --- N·∫°p c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ---
    load_dotenv(resource_path(".env"))

    # --- Kh·ªüi t·∫°o c√°c kho l∆∞u tr·ªØ (Storage) ---
    users_store = JsonStorage(resource_path("data/users.json"))
    customers_store = JsonStorage(resource_path("data/customers.json"))
    products_store = JsonStorage(resource_path("data/products.json"))
    orders_store = JsonStorage(resource_path("data/orders.json"))
    carts_store = JsonStorage(resource_path("data/carts.json"))
    categories_store = JsonStorage(resource_path("data/categories.json"))

    # --- Kh·ªüi t·∫°o c√°c d·ªãch v·ª• (Services) ---
    auth = AuthService(users_store)
    auth.ensure_admin_seed()

    cust_srv = CustomerService(customers_store)
    prod_srv = ProductService(products_store)
    order_srv = OrderService(orders_store, products_store)
    cart_srv = CartService(carts_store)
    categories_srv = CategoryService(categories_store)
    user_srv = UserService(users_store)

    # --- C·∫•u h√¨nh Scraper v√† Task ---
    SCRAPER_CONFIG = {
        'PHONE_SCRAPER_ENABLED': PhoneListScraper,
        'PHONE_DETAILS_SCRAPER_ENABLED': PhoneDetailScraper,
        'LAPTOP_SCRAPER_ENABLED': LaptopListScraper,
        'UPDATE_CATEGORIES_ENABLED': UpdateCategoryCronTask,
    }

    all_initialized_tasks = []

    print("--- ƒêang ki·ªÉm tra c·∫•u h√¨nh c√°c t√°c v·ª• t·ª´ .env ---")
    for env_key, task_class in SCRAPER_CONFIG.items():
        if get_bool_from_env(env_key):
            print(f" -> ƒêang b·∫≠t: {task_class.__name__}")
            task_instance = None
            if task_class == UpdateCategoryCronTask:
                category_interval = int(os.getenv('CATEGORY_UPDATE_INTERVAL_SECONDS', 600))
                task_instance = task_class(product_service=prod_srv, category_service=categories_srv,
                                           interval_seconds=category_interval)
            elif hasattr(task_class, '__init__') and 'storage' in task_class.__init__.__code__.co_varnames:
                task_instance = task_class(storage=products_store)
            else:
                task_instance = task_class()
            all_initialized_tasks.append(task_instance)
        else:
            print(f" -> ƒê√£ t·∫Øt: {task_class.__name__}")

    # --- PH√ÇN LO·∫†I V√Ä KH·ªûI ƒê·ªòNG C√ÅC SCHEDULER ---
    scrapers_for_main_scheduler = []
    other_schedulers_to_start_manually = []

    for task_instance in all_initialized_tasks:
        if isinstance(task_instance, UpdateCategoryCronTask):
            other_schedulers_to_start_manually.append(task_instance)
        elif hasattr(task_instance, 'scrape') and callable(getattr(task_instance, 'scrape')):
            scrapers_for_main_scheduler.append(task_instance)
        else:
            print(f"‚ö†Ô∏è Task '{task_instance.__class__.__name__}' kh√¥ng ƒë∆∞·ª£c ph√¢n lo·∫°i r√µ r√†ng. Kh√¥ng kh·ªüi ƒë·ªông.")

    # --- Kh·ªüi ƒë·ªông ScraperScheduler ch√≠nh (cho c√°c scraper) ---
    main_scraper_scheduler = None
    if scrapers_for_main_scheduler:
        print(f"--- T√¨m th·∫•y {len(scrapers_for_main_scheduler)} scraper ƒë∆∞·ª£c b·∫≠t. Kh·ªüi ƒë·ªông ScraperScheduler. ---")
        interval = int(os.getenv('SCRAPER_INTERVAL_SECONDS', 300))
        main_scraper_scheduler = ScraperScheduler(scrapers_to_run=scrapers_for_main_scheduler,
                                                  interval_seconds=interval)
        main_scraper_scheduler.start()
    else:
        print("--- Kh√¥ng c√≥ scraper n√†o ƒë∆∞·ª£c b·∫≠t cho ScraperScheduler. ---")

    # --- Kh·ªüi ƒë·ªông c√°c scheduler kh√°c (nh∆∞ CategoryScheduler) ---
    for sched in other_schedulers_to_start_manually:
        print(f"--- Kh·ªüi ƒë·ªông Scheduler ri√™ng: {sched.__class__.__name__} ---")
        sched.start()

    # --- Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng Tkinter ---
    root = tk.Tk()
    root.withdraw()

    # <<< THAY ƒê·ªîI 1: T·∫†O H√ÄM SHUTDOWN T·∫¨P TRUNG >>>
    # H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ƒë√≥ng b·∫•t k·ª≥ c·ª≠a s·ªï ch√≠nh n√†o.
    def shutdown_app():
        print("--- B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫Øt ·ª©ng d·ª•ng ---")

        # 1. D·ª´ng t·∫•t c·∫£ c√°c scheduler ƒëang ch·∫°y
        if main_scraper_scheduler and main_scraper_scheduler.is_running:
            print("ƒêang d·ª´ng ScraperScheduler ch√≠nh...")
            main_scraper_scheduler.stop()

        for sched in other_schedulers_to_start_manually:
            if sched.is_running:
                print(f"ƒêang d·ª´ng scheduler: {sched.__class__.__name__}...")
                sched.stop()

        # 2. Ph√° h·ªßy c·ª≠a s·ªï root ƒë·ªÉ k·∫øt th√∫c ·ª©ng d·ª•ng ho√†n to√†n
        print("ƒêang ƒë√≥ng giao di·ªán ng∆∞·ªùi d√πng...")
        root.destroy()
        print("--- ·ª®ng d·ª•ng ƒë√£ ƒë√≥ng ho√†n to√†n. ---")

    def on_login_success(u):
        win = AppWindow(master=root, session_user=u)

        # <<< THAY ƒê·ªîI 2: G·∫ÆN H√ÄM SHUTDOWN V√ÄO C·ª¨A S·ªî CH√çNH >>>
        # Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X" tr√™n c·ª≠a s·ªï AppWindow, h√†m shutdown_app s·∫Ω ƒë∆∞·ª£c g·ªçi.
        win.protocol("WM_DELETE_WINDOW", shutdown_app)

        # --- X√°c ƒë·ªãnh quy·ªÅn h·∫°n theo vai tr√≤ (gi·ªØ nguy√™n) ---
        can_manage_users = auth.authorize(u, (ROLES_ENUM['ADMIN'], ROLES_ENUM['EMP_MANAGER']))
        can_access_products = auth.authorize(u, (
        ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['SALES_PERSON']))
        can_access_cart = auth.authorize(u,
                                         (ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['SALES_PERSON']))
        can_access_customers = auth.authorize(u, (
        ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['SALES_PERSON']))
        can_access_orders = auth.authorize(u,
                                           (ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['ACCOUNTANT']))
        can_view_reports = auth.authorize(u,
                                          (ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['ACCOUNTANT']))

        # --- Th√™m c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng (gi·ªØ nguy√™n) ---
        initial_view_button = None
        win.add_nav_button("Th√¥ng tin c√° nh√¢n", ProfileView, u)
        if can_manage_users:
            win.add_nav_button("Ng∆∞·ªùi d√πng", UsersView, users_store, u)
        if can_access_products:
            initial_view_button = win.add_nav_button("S·∫£n ph·∫©m", ProductsView, prod_srv, cart_srv, categories_srv, True)
        if can_access_cart:
            win.add_nav_button("üõí Gi·ªè h√†ng", CartView, cart_srv, order_srv, cust_srv, u)
        if can_access_customers:
            win.add_nav_button("Kh√°ch h√†ng", CustomersView, cust_srv, order_srv, True)
        if can_access_orders:
            win.add_nav_button("ƒê∆°n h√†ng", OrdersView, order_srv, cust_srv, prod_srv, u, True)
        if can_view_reports:
            win.add_nav_button("B√°o c√°o", ReportFrame, order_srv, prod_srv, cust_srv, user_srv)

        def logout():
            win.destroy()
            # G·ªçi l·∫°i LoginView v√† truy·ªÅn h√†m shutdown v√†o
            login_view = LoginView(root, auth, on_login_success)
            login_view.protocol("WM_DELETE_WINDOW", shutdown_app)

        win.add_nav_button("ƒêƒÉng xu·∫•t", command=logout)
        win.show_view(ProfileView, u)
        if initial_view_button:
            win._select_button_style(initial_view_button)

    # <<< THAY ƒê·ªîI 3: G·∫ÆN H√ÄM SHUTDOWN V√ÄO C·ª¨A S·ªî ƒêƒÇNG NH·∫¨P >>>
    # R·∫•t quan tr·ªçng: n·∫øu ng∆∞·ªùi d√πng ƒë√≥ng c·ª≠a s·ªï ƒëƒÉng nh·∫≠p, ·ª©ng d·ª•ng c≈©ng ph·∫£i t·∫Øt h·∫≥n.
    login_view = LoginView(root, auth, on_login_success)
    login_view.protocol("WM_DELETE_WINDOW", shutdown_app)

    root.mainloop()

if __name__ == "__main__":
    run()

