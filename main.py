# -*- coding: utf-8 -*-
# Ho·∫∑c
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as tk
import os
from dotenv import load_dotenv

# Models
from app.models.storage import JsonStorage
from app.schedulers.update_categories_scheduler import UpdateCategoryCronTask

# Services
from app.services.auth import AuthService
from app.services.cart_service import CartService
from app.services.category_service import CategoryService
from app.services.customer_service import CustomerService
from app.services.product_service import ProductService
from app.services.order_service import OrderService
from app.services.user_service import UserService  # <-- Import UserService

# UI Views
from app.ui.app_window import AppWindow
from app.ui.cart_view import CartView
from app.ui.login_view import LoginView
from app.ui.profile_view import ProfileView
from app.ui.report_view import ReportFrame
from app.ui.users_view import UsersView
from app.ui.customers_view import CustomersView
from app.ui.products_view import ProductsView
from app.ui.orders_view import OrdersView

# H·ªá th·ªëng c√†o d·ªØ li·ªáu (Scraper)
from app.scrapers.phone_detail_scraper import PhoneDetailScraper
from app.scrapers.phone_list_scraper import PhoneListScraper
from app.scrapers.laptop_list_scraper import LaptopListScraper

# Schedulers
from app.schedulers.scraper_scheduler import ScraperScheduler
from app.utils.dummy_orders_generation import DummyOrderCreator


def get_bool_from_env(key: str, default: bool = False) -> bool:
    value = os.getenv(key, str(default)).lower()
    return value in ('true', '1', 't', 'on')

# C√°c vai tr√≤ (roles) trong h·ªá th·ªëng c·ªßa b·∫°n
ROLES_ENUM = {
    'ADMIN': 'administrator',
    'EMP_MANAGER': 'employee_manager',
    'SALES_MANAGER': 'sales_manager',
    'SALES_PERSON': 'sales_person',
    'ACCOUNTANT': 'accountant',
}

def run():
    # --- N·∫°p c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ---
    load_dotenv()

    # --- Kh·ªüi t·∫°o c√°c kho l∆∞u tr·ªØ (Storage) ---
    users_store = JsonStorage("data/users.json")
    customers_store = JsonStorage("data/customers.json")
    products_store = JsonStorage("data/products.json")
    orders_store = JsonStorage("data/orders.json")
    carts_store = JsonStorage("data/carts.json")
    categories_store = JsonStorage("data/categories.json")

    # --- Kh·ªüi t·∫°o c√°c d·ªãch v·ª• (Services) ---
    # KH·ªûI T·∫†O UserService TR∆Ø·ªöC V√å C√ÅC D·ªäCH V·ª§ KH√ÅC C√ì TH·ªÇ PH·ª§ THU·ªòC V√ÄO N√ì
    auth = AuthService(users_store)  # auth v·∫´n d√πng users_store tr·ª±c ti·∫øp, kh√¥ng sao
    auth.ensure_admin_seed()

    cust_srv = CustomerService(customers_store)
    prod_srv = ProductService(products_store)
    order_srv = OrderService(orders_store, products_store)
    cart_srv = CartService(carts_store)
    categories_srv = CategoryService(categories_store)
    user_srv = UserService(users_store)

    # --- C·∫•u h√¨nh Scraper v√† Task --- (ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n)
    SCRAPER_CONFIG = {
        'PHONE_SCRAPER_ENABLED': PhoneListScraper,
        'PHONE_DETAILS_SCRAPER_ENABLED': PhoneDetailScraper,
        'LAPTOP_SCRAPER_ENABLED': LaptopListScraper,
        'UPDATE_CATEGORIES_ENABLED': UpdateCategoryCronTask,
    }

    all_initialized_tasks = []

    print("--- ƒêang ki·ªÉm tra c·∫•u h√¨nh c√°c t√°c v·ª• t·ª´ .env ---")
    for env_key, task_class in SCRAPER_CONFIG.items():
        if get_bool_from_env(env_key):
            print(f" -> ƒêang b·∫≠t: {task_class.__name__}")

            task_instance = None
            if task_class == UpdateCategoryCronTask:
                # CategoryScheduler l√† m·ªôt scheduler c·∫ßn c√°c tham s·ªë ri√™ng
                category_interval = int(os.getenv('CATEGORY_UPDATE_INTERVAL_SECONDS', 600))
                task_instance = task_class(
                    product_service=prod_srv,
                    category_service=categories_srv,
                    interval_seconds=category_interval
                )
            elif hasattr(task_class, '__init__') and 'storage' in task_class.__init__.__code__.co_varnames:
                # C√°c scraper th√¥ng th∆∞·ªùng c·∫ßn tham s·ªë 'storage'
                task_instance = task_class(storage=products_store)
            else:
                # C√°c task kh√°c kh√¥ng c·∫ßn tham s·ªë
                task_instance = task_class()

            all_initialized_tasks.append(task_instance)
        else:
            print(f" -> ƒê√£ t·∫Øt: {task_class.__name__}")

    # --- PH√ÇN LO·∫†I V√Ä KH·ªûI ƒê·ªòNG C√ÅC SCHEDULER ---
    scrapers_for_main_scheduler = []
    other_schedulers_to_start_manually = []

    for task_instance in all_initialized_tasks:
        if isinstance(task_instance, UpdateCategoryCronTask):
            other_schedulers_to_start_manually.append(task_instance)
        elif hasattr(task_instance, 'scrape') and callable(getattr(task_instance, 'scrape')):
            scrapers_for_main_scheduler.append(task_instance)
        else:
            print(f"‚ö†Ô∏è Task '{task_instance.__class__.__name__}' kh√¥ng ƒë∆∞·ª£c ph√¢n lo·∫°i r√µ r√†ng. Kh√¥ng kh·ªüi ƒë·ªông.")

    # --- Kh·ªüi ƒë·ªông ScraperScheduler ch√≠nh (cho c√°c scraper) ---
    main_scraper_scheduler = None
    if scrapers_for_main_scheduler:
        print(f"--- T√¨m th·∫•y {len(scrapers_for_main_scheduler)} scraper ƒë∆∞·ª£c b·∫≠t. Kh·ªüi ƒë·ªông ScraperScheduler. ---")
        try:
            interval = int(os.getenv('SCRAPER_INTERVAL_SECONDS', 300))
        except ValueError:
            interval = 300
        main_scraper_scheduler = ScraperScheduler(scrapers_to_run=scrapers_for_main_scheduler,
                                                  interval_seconds=interval)
        main_scraper_scheduler.start()
    else:
        print("--- Kh√¥ng c√≥ scraper n√†o ƒë∆∞·ª£c b·∫≠t cho ScraperScheduler. ---")

    # --- Kh·ªüi ƒë·ªông c√°c scheduler kh√°c (nh∆∞ CategoryScheduler) ---
    for sched in other_schedulers_to_start_manually:
        print(f"--- Kh·ªüi ƒë·ªông Scheduler ri√™ng: {sched.__class__.__name__} ---")
        sched.start()

    # --- Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng Tkinter ---
    root = tk.Tk()
    root.withdraw()

    def on_login_success(u):
        win = AppWindow(master=root, session_user=u)

        # --- X√°c ƒë·ªãnh quy·ªÅn h·∫°n theo vai tr√≤ ---

        # Quy·ªÅn qu·∫£n l√Ω ng∆∞·ªùi d√πng: Admin v√† Employee Manager
        can_manage_users = auth.authorize(u, (ROLES_ENUM['ADMIN'], ROLES_ENUM['EMP_MANAGER']))

        # Quy·ªÅn truy c·∫≠p s·∫£n ph·∫©m: Admin, Sales Manager v√† Sales Person
        can_access_products = auth.authorize(u, (
            ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['SALES_PERSON']))

        # Quy·ªÅn truy c·∫≠p gi·ªè h√†ng: Admin, Sales Manager v√† Sales Person
        can_access_cart = auth.authorize(u, (
            ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['SALES_PERSON']))

        # Quy·ªÅn truy c·∫≠p kh√°ch h√†ng: Admin v√† Sales Manager
        can_access_customers = auth.authorize(u, (
            ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['SALES_PERSON']))

        # Quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng: Admin v√† Sales Manager
        can_access_orders = auth.authorize(u, (
            ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['ACCOUNTANT']))

        # Quy·ªÅn xem b√°o c√°o: Admin, Sales Manager v√† Accountant
        can_view_reports = auth.authorize(u, (
            ROLES_ENUM['ADMIN'], ROLES_ENUM['SALES_MANAGER'], ROLES_ENUM['ACCOUNTANT']))

        # --- Th√™m c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng (tab) d·ª±a tr√™n quy·ªÅn h·∫°n ---

        # Tab "Th√¥ng tin c√° nh√¢n": Lu√¥n hi·ªÉn th·ªã cho t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
        win.add_nav_button("Th√¥ng tin c√° nh√¢n", ProfileView, u)

        # Tab "Ng∆∞·ªùi d√πng": Ch·ªâ Admin v√† Employee Manager
        if can_manage_users:
            win.add_nav_button("Ng∆∞·ªùi d√πng", UsersView, users_store, u)

        # Tab "S·∫£n ph·∫©m": Admin, Sales Manager v√† Sales Person
        if can_access_products:
            initial_view_button = win.add_nav_button("S·∫£n ph·∫©m", ProductsView, prod_srv, cart_srv, categories_srv, True)

        # Tab "Gi·ªè h√†ng": Admin, Sales Manager v√† Sales Person
        if can_access_cart:
            win.add_nav_button("üõí Gi·ªè h√†ng", CartView, cart_srv, order_srv, cust_srv, u)

        # Tab "Kh√°ch h√†ng": Admin v√† Sales Manager
        if can_access_customers:
            win.add_nav_button("Kh√°ch h√†ng", CustomersView, cust_srv, order_srv, True)

        # Tab "ƒê∆°n h√†ng": Admin v√† Sales Manager
        if can_access_orders:
            win.add_nav_button("ƒê∆°n h√†ng", OrdersView, order_srv, cust_srv, prod_srv, u, True)

        # Tab "B√°o c√°o": Admin, Sales Manager v√† Accountant
        if can_view_reports:
            win.add_nav_button("B√°o c√°o", ReportFrame, order_srv, prod_srv, cust_srv, user_srv)

        # N√∫t "ƒêƒÉng xu·∫•t": Lu√¥n hi·ªÉn th·ªã
        def logout():
            win.destroy()
            LoginView(root, auth, on_login_success)

        win.add_nav_button("ƒêƒÉng xu·∫•t", command=logout)

        win.show_view(ProfileView, u)

        # Manually select the button for the initial view
        if initial_view_button:
            win._select_button_style(initial_view_button)

    LoginView(root, auth, on_login_success)
    root.mainloop()

    # --- D·ª´ng T·∫§T C·∫¢ c√°c schedulers khi ·ª©ng d·ª•ng ƒë√≥ng ---
    if main_scraper_scheduler and main_scraper_scheduler.is_running:
        main_scraper_scheduler.stop()

    for sched in other_schedulers_to_start_manually:
        if sched.is_running:
            sched.stop()

    print("--- ·ª®ng d·ª•ng ƒë√£ ƒë√≥ng. ---")


if __name__ == "__main__":
    run()

